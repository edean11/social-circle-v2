#padding-fix.container
    %p#circleHeader #{@user.name}'s Circle
    = link_to "", new_cast_path, class: "fa fa-rss", id: 'castIconLink'
    = link_to "", new_group_path, class: "fa fa-users", id: 'groupIconLink'
    = link_to "", new_subscription_path, class: "fa fa-bookmark", id: 'subscriptionIconLink'
    %i.fa.fa-bullseye#myLocationButton
    #map
    .sidebarContainer
        .groupsContainer
        .commentArea.hidden
            %i.fa.fa-times-circle-o#closeComments
            .commentsContainer
                .castCommentsHeader
                .castComments
            .commentInputContainer
                %input#commentInput
                %button#submitComment Submit
        .searchArea
            %p.searchHeader Search
            %select#searchType
                %option Title
                %option Content
                %option User
            %input.searchInput
            %button.submitSearch{:type => "button"} Submit

:javascript

    //Holder variables
    var markers = [];
    var infoWindows = [];
    var mapArr = [];
    var userName = "#{@user.name}"
    var userId = "#{@user.id}"
    var openCastId = [];
    var lastRefreshCastIds = [];
    var lastUsedPath = [];
    var lastRefreshedCasts = [];



    //////////////////////////////////////////////
    //////////////// MARKERS /////////////////////
    //////////////////////////////////////////////

    //Create marker icon
    function createIcon(pinColor){
        var pinImage = new google.maps.MarkerImage("http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|" + pinColor,
        new google.maps.Size(21, 34),
        new google.maps.Point(0,0),
        new google.maps.Point(10, 34));
        return pinImage;
    }

    //Marker functions

    function populateMarker(position,map,infowindow,cast_id,color) {
        var pinImage = createIcon(color);
        var marker = new google.maps.Marker({
          position: position,
          map: map,
          icon: pinImage,
          animation: google.maps.Animation.DROP
        });
        marker.set("id", cast_id);
        map.panTo(position);
        google.maps.event.addListener(marker, 'click', function(e) {
          closeAllInfoWindows();
          infowindow.open(map,marker);
          showComments(marker.id);
        });
        markers.push(marker);
    }
    function deleteMarker(cast_id){
        $.ajax({
          url: "/casts/" + cast_id,
          type: "post",
          dataType: "json",
          data: {"_method":"delete"}
        });
    }
    function removeAllMarkersFromMap(){
        for(var i=0;i<markers.length;i++){
            markers[i].setMap(null);
            markers[i] = null;
        }
        markers = [];
    }
    function closeAllInfoWindows() {
        for (var i=0;i<infoWindows.length;i++) {
          infoWindows[i].close();
        }
    }
    function findDaysLeft(expiration){
        var now = new Date();
        var exp = Date.parse(expiration);
        var daysleft = parseFloat(((exp - now)/1000)*(1/86400)).toFixed(2);
        return daysleft;
    }

    function findMarkerColor(expiration){
        var daysleft = findDaysLeft(expiration);
        var color;
        if(daysleft<0){
            color = 'expired'
        }else if(daysleft<0.05){
            color = 'FA334F'
        }else if(daysleft<1){
            color = 'FFD700'
        }else if(daysleft<7){
            color = '96D72D'
        }else if(daysleft<30){
            color = '323299'
        }else if(daysleft<365){
            color = '70018B'
        }
        return color;
    }

    function makeInfoBubble(cast,map,position){
        var contentString = '<div class="castPopup '+cast.id+'Popup" id="cast.id">'+
                '<p class=castTitle '+cast.id+'Title>'+cast.title+'</p>'+
                '<p class=castContent '+cast.id+'Content>'+cast.content+'</p>'+
                '</div>'
        var infoBubble = new InfoBubble({
          map: map,
          content: contentString,
          position: position,
          padding: 4,
          backgroundColor: 'grey',
          borderRadius: 20,
          borderWidth: 1,
          borderColor: 'black',
          disableAutoPan: false,
          hideCloseButton: true,
          backgroundClassName: 'infoBubble',
          arrowSize: 0,
          minWidth: 160,
          maxWidth: 160,
          shadowStyle: 0
        });
        infoWindows.push(infoBubble);
        return infoBubble;
    }

    function populateMarkers(path,map){
        $.getJSON(path,function(data) {
          lastUsedPath = [];
          lastUsedPath.push(path);
          lastRefreshCastIds = [];
          lastRefreshedCasts = [];
          lastRefreshedCasts.push(data);
          removeAllMarkersFromMap();
          //loop through all markers and append
          $.each(data,function(index,cast){
            //determine latLng
            var latLng = new google.maps.LatLng(cast.lat,cast.lon);
            var infoBubble = makeInfoBubble(cast,map,latLng);
            //attach markers and info windows to map
            var color = findMarkerColor(cast.expiration);
            if(color==='expired'){
                deleteMarker(cast.id);

            }else{
                populateMarker(latLng,map,infoBubble,cast.id,color);
                lastRefreshCastIds.push(cast.id);
            }
          });
      })
    }

    function updateMarkers(){
        $.getJSON(lastUsedPath[0],function(data){
            var newCastIds = [];
            lastRefreshedCasts = [];
            lastRefreshedCasts.push(data);
            //populate new casts
            $.each(data,function(index,cast){
                newCastIds.push(cast.id)
                if(lastRefreshCastIds.indexOf(cast.id)===-1){
                    //determine latLng
                    var latLng = new google.maps.LatLng(cast.lat,cast.lon);
                    var infowindow = makeInfoBubble(cast,mapArr[0],latLng);
                    //attach markers and info windows to map
                    var color = findMarkerColor(cast.expiration);
                    populateMarker(latLng,mapArr[0],infowindow,cast.id,color);
                    lastRefreshCastIds.push(cast.id);
                }
            })
            //remove expired casts
            $.each(lastRefreshedCasts[0],function(index,cast){
                if(newCastIds.indexOf(cast.id)===-1){
                    deleteMarker(cast.id);
                    var ind = lastRefreshedCastIds.indexOf(cast.id);
                    lastRefreshedCastIds.splice(ind,1)
                }
            })
        })
    }

    //////////////////////////////////////////////
    //////////////// COMMENTS ////////////////////
    //////////////////////////////////////////////

    var lastCommentsPath = [];
    var refreshCommentsInterval;
    var lastCommentRefreshLength = 0;

    function populateComments(path,is_parent,is_new){
        if(!is_parent){
            lastCommentsPath = [];
            lastCommentsPath.push(path);
        }
        $.getJSON(path,function(data){
            if(is_parent){
                var elem = $('<div class="castParentComment" data-uuid="'+data.id+'">'+
                            '<img class="castCommentParentAvatar" src="'+data.user.avatar.url+'"></img>'+
                        '<div class="castCommentParentContentContainer">'+
                            '<p class="castCommentParentHeader">'+data.title+'</p>'+
                            '<p class="castCommentParentContent">'+data.content+'</p>'+
                            '<p class="castCommentParentUser">Owner: '+data.user.name+'</p>'+
                            '<p class="castCommentParentExpiration">'+findDaysLeft(data.expiration)+' Days Remaining</p>'+
                        '</div>');
                $('.castCommentsHeader').append(elem);
            }else{
                if(lastCommentRefreshLength!==Object.keys(data).length || is_new){
                    $('.castComments').empty();
                    $.each(data,function(index,val){
                        var elem = $('<div class="castComment" data-uuid="'+val.id+'">'+
                            '<div class="castCommentChildProfileContainer">'+
                                '<img class="castCommentChildAvatar" src="'+val.user.avatar.url+'"></img>'+
                                '<p class="castCommentChildUser">'+val.user.name+'</p>'+
                            '</div>'+
                            '<div class="castCommentChildContentContainer">'+
                                '<p class="castCommentChildContent">'+val.content+'</p>'+
                                '<p class="castCommentChildDate">'+val.created_at+'</p>'+
                            '</div>');
                        $('.castComments').append(elem);
                    })
                    lastCommentRefreshLength = Object.keys(data).length;
                }
            }
        });
    }

    function updateComments(){
        populateComments(lastCommentsPath[0],false);
    }

    function resetCommentContainer(){
        $('.castCommentsHeader').empty();
        $('.castComments').empty()
        $('#commentInput').val('');
    }

    function showComments(cast_id){
        openCastId = [];
        openCastId.push(cast_id);
        resetCommentContainer();
        $('.commentArea').removeClass('hidden');
        $('.groupsContainer').addClass('hidden');
        $('.searchArea').addClass('hidden');
        var castPath = "#{root_url}/casts/"+cast_id;
        var commentsPath = "#{root_url}/casts/"+cast_id+"/comments"
        populateComments(castPath,true,true);
        populateComments(commentsPath,false,true);
        refreshCommentsInterval = setInterval(updateComments,5000);
    }

    $('#closeComments').click(function(){
        $('.commentArea').addClass('hidden');
        $('.groupsContainer').removeClass('hidden');
        $('.searchArea').removeClass('hidden');
        clearInterval(refreshCommentsInterval);
        closeAllInfoWindows();
    });

    function postComment(cast_ID){
        var commentVal = $('#commentInput').val();
        if(commentVal!==''){
            $.post("#{comments_path}", { content: commentVal, user_id: "#{current_user}", cast_id: cast_ID },
                function(data){
                    console.log('posted:'+data);
                },'json');
        }else{
            console.log("Please enter a comment in order to submit");
        }
    }

    $('#submitComment').click(function(){
        if(openCastId[0]){
            var castPath = "#{root_url}/casts/"+openCastId[0];
            var commentsPath = "#{root_url}/casts/"+openCastId[0]+"/comments"
            postComment(openCastId[0]);
            resetCommentContainer();
            populateComments(castPath,true,false);
            populateComments(commentsPath,false,false);
        }
    })

    /////////////////////////////////////////////
    //////////////// SEARCH /////////////////////
    /////////////////////////////////////////////

    function searchCasts(){
        var selectedType = $('#searchType option:selected').text();
        var searchVal = $('.searchInput').val();
        $('#circleHeader').text(searchVal+" Casts");
        if(selectedType==='Title'){
            populateMarkers("#{root_url}/casts.json?search_title="+searchVal,mapArr[0]);
        }else if(selectedType==='Content'){
            populateMarkers("#{root_url}/casts.json?search_content="+searchVal,mapArr[0]);
        }else if(selectedType==='User'){
            populateMarkers("#{root_url}/casts.json?search_user="+searchVal,mapArr[0]);
        }else{console.log('invalid search')}
    }

    $('.submitSearch').click(function(){
        searchCasts();
        $('.searchInput').val('');
    })

    //////////////////////////////////////////////
    //////////////// INITIALIZE //////////////////
    //////////////////////////////////////////////

    function populateSubscribedGroups(){
        var myCastsElem = $('<div class="groupContainer" data-uuid="'+userId+'"><img class="groupContainerAvatar" src="#{@user.avatar.url}"></img><p class="groupName">'+"#{@user.name}"+'</p></div>')
        $('.groupsContainer').append(myCastsElem);
        $.getJSON("#{user_groups_path(@user)}",function(data) {
            //and if statement for adding 'no comments' elem
            $.each(data,function(index,group){
                var elem = $('<div class="groupContainer" data-group="'+group.name+'" data-uuid="'+group.id+'"><img class="groupContainerAvatar" src="'+group.picture.url+'" data-src="'+group.id+'" data-val="'+group.name+'"></img><p class="groupName">'+
                group.name+'</p></div>')
                $('.groupsContainer').append(elem);
            });
        });
    }

    function removeGroupHighlights(){
        $('.groupContainer').each(function(index,group){
            $(group).css('border','2px solid black')
        })
    }

    function highlightGroup(e){
        $(e.target).parent().css('border','5px solid steelblue');
    }

    function handleGroupClick(e){
        var uuid = $(e.target).attr('data-uuid') || $(e.target).parent().attr('data-uuid');
        if(uuid){
            removeGroupHighlights();
            highlightGroup(e);
            var groupName = $(e.target).text() || $(e.target).parent().text();
            if(groupName===userName){
                $('#circleHeader').text(groupName+"'s Circle");
                populateMarkers("#{root_url}/users/"+uuid+"/casts.json",mapArr[0]);
            }else{
                $('#circleHeader').text(groupName+" Circle");
                populateMarkers("#{root_url}/groups/"+uuid+"/casts.json",mapArr[0]);
            }
        }
    }

    function setCenter(position){
        var lat = position.coords.latitude;
        var lng = position.coords.longitude;
        var pos = new google.maps.LatLng(lat, lng);
        mapArr[0].setCenter(new google.maps.LatLng(lat, lng));
    }

    function getLocation() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(setCenter);
        } else {
          alert("Geolocation is not supported by this browser.");
        }
    }

    function addMyLocationListener(){
        $('#myLocationButton').click(function(){
            getLocation();
        })
    }

    function initialize() {
      if(!($('#map').length)){return}
      //insert rails variables here
      var mapOptions = {
        center: { lat: parseFloat(-25.363882), lng: parseFloat(131.044922)},
        zoom: 12,
        disableDefaultUI: true
      };
      var map = new google.maps.Map(document.getElementById('map'),
        mapOptions);
      mapArr.push(map);
      populateMarkers("#{user_casts_path(@user)}",map)
      var refreshCastInterval = setInterval(updateMarkers,5000);
      populateSubscribedGroups();
      addMyLocationListener();
      $('.groupsContainer').click('.groupContainer',function(e){
        handleGroupClick(e);
      })
      $('.groupContainerAvatar').click(function(e){
        handleGroupClick(e);
      })
    }
    google.maps.event.addDomListener(window, 'load', initialize);


